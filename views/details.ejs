<html>
<head>
  <title>Details Page</title>
  <link rel="stylesheet" href="Header.css">
  <link rel="stylesheet" href="Details.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
	<!-- HEADER -->
    <div class="Main">
        <img class="headerBackgroundImage" src='Images/HeaderBackground.png'></img>
  <div class="headerContent">
       <div class="headerImage">
          <img src='/Images/LogoTransp.png' />
      </div>
           <h3 class="headerTitle">Fair Energy Certification</h3>
      </div>
      <div class="buttonsholder">
          <a href="/"><button>Dashboard</button></a>
          <a href="/about"><button>About us</button></a>
          <a href="/register"><button>Register</button></a>
      </div>
  </div>	

    <div Class="Container">
        <div Class="Content">
          <h2 class='companyname'><%= data.name %></h2>
          <div Class="Line" ></div>
  
          <!-- {/* DESCRIPTION */} -->
          <div Class="Description">
            <p><%= data.description %></p>
          </div>

          <!-- {/* NFT LIST */} -->
          <h4 Class="ProgressHeader">EPCToken - progression</h4>
          <div id='NFTHistory' Class="Progressbar">
          </div>
  
          <!-- {/* PROGRESS GRAPH */}   -->
          <div Class="ProgressChart">
            <h4>Progress chart</h4>
            <button id='consumption' onClick="CreateGraph('EnergyUsage', 'consumption')">Usage</button>
            <button id='green' onClick="CreateGraph('EnergyGreen', 'green')">Green</button>
            <button id='sharing' onClick="CreateGraph('EnergySharing', 'sharing')">Sharing</button>
            <canvas id="myChart"></canvas>
          </div>
  
        </div>
      </div>
      <img class="BackgroundImageDetails" src='Images/FooterBackground.png'></img>
</body>

<script>

let AllCompanyData = [];
let CIDdata = '<%= CID %>';

const getCompanyHistoryData = async () =>
{
  document.getElementById('NFTHistory').innerHTML = "";
  
  let companyID = -1;

  let companyName = '<%= data.name %>'
  let companyData = '<%= companyData %>';
  

  let companyDataArray = companyData.split(',');
  companyData = [];
  for (let i = 0; i < companyDataArray.length; i += 2) {
    let index = companyDataArray[i];
    let string = companyDataArray[i + 1];
    companyData.push([index, string]);
  }

  let CIDArray = CIDdata.split(',');
  CIDdata = [];
  for (let i = 0; i < CIDArray.length; i += 2) {
      let date = CIDArray[i];
      let CID = CIDArray[i + 1];
      CIDdata.push([date, CID]);
  }

  for await (const data of companyData) {
    if (data[1] == companyName)
    {
      companyID = data[0];
    }
  }

  const divMapping = new Map();

  for await (const data of CIDdata) {
    const metadata = "https://blush-worldwide-swift-945.mypinata.cloud/ipfs/" + data[1] + '/' + companyID + data[0] + '.json';
    const alldata = getAllDataFromJSON(metadata);
    AllCompanyData.push(alldata);

    let img = getImageFromJSON(metadata);

    img.then((result) => {
        const div = document.createElement("div");
        const imageElement = document.createElement("img");
        const date = document.createElement("h2");
        imageElement.src = result;
        div.className = "ProgressbarItem";
        const formattedStr = `${data[0].slice(0, 4)}-${data[0].slice(4, 6)}`;
        date.innerHTML = formattedStr;
        div.onclick = function() { window.open("https://volta-explorer.energyweb.org/token/0xe8C1818545116EAcfC3C7F4c467Ad768e426E507/instance/" + companyID + data[0] + "/token-transfers") };
        div.appendChild(imageElement);
        div.appendChild(date);
        // imageElement.onclick ADD LINK TO NFT
        //document.getElementById('NFTHistory').appendChild(div);
        console.log(data[0].slice(0, 6));
        const index = parseInt(data[0].slice(0, 6), 10);
        divMapping.set(index, div);
        document.getElementById('NFTHistory').appendChild(div); //GET RID OF THIS ONE
    });
  }
  
// Convert the Map entries to an array and sort it in descending order based on keys
const sortedMapping = Array.from(divMapping).sort(([keyA], [keyB]) => keyB - keyA);
console.log(sortedMapping);

// Loop through the sorted mapping
for (const [key, value] of sortedMapping) {
  document.getElementById('NFTHistory').appendChild(value);
}

  // Initial graph update with EnergyUsage data
  CreateGraph("EnergyUsage", "consumption");
};

async function getImageFromJSON(jsonLink) {
  try {
    const response = await fetch(jsonLink);
    const jsonData = await response.json();
    
    const imageUrl = 'https://blush-worldwide-swift-945.mypinata.cloud/ipfs/' + jsonData.image.replace(/^ipfs:\/\//, '');

    return imageUrl;
  } catch (error) {
    console.error("Error fetching JSON data:", error);
    return null;
  }
}

async function getAllDataFromJSON(jsonLink) {
  try {
    const response = await fetch(jsonLink);
    const jsonData = await response.json();

    return jsonData;
  } catch (error) {
    console.error("Error fetching JSON data:", error);
    return null;
  }
}

function CreateGraph(type, buttonId){

const dataPromises = AllCompanyData;

Promise.all(dataPromises)
  .then((dataArray) => {
    let data;
    if(type == "EnergyUsage"){
      data = dataArray.map(
      (dataObj) => parseFloat(dataObj.attributes[0].EnergyUsage)
      );
    }
    if(type == "EnergySharing"){
      data = dataArray.map(
      (dataObj) => parseFloat(dataObj.attributes[0].EnergySharing)
      );
    }
    if(type == "EnergyGreen"){
      data = dataArray.map(
      (dataObj) => parseFloat(dataObj.attributes[0].EnergyGreen)
      );
    }

    updateGraph(data, type, buttonId);
  })
  .catch((error) => {
    console.error('Error fetching data:', error);
  });
}

let myChart = null;

function updateGraph(data, type, buttonId) {

  if (myChart) {
    myChart.destroy();
  }

  const canvas = document.getElementById('myChart');
  canvas.width = 800;
  canvas.height = 300;

  const ctx = canvas.getContext('2d');
  console.log(CIDdata[0][0]);

  // Remove the 'let' declaration from myChart here
  myChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: Array.from({ length: data.length }, (_, index) => `${CIDdata[index][0].slice(0, 4)}-${CIDdata[index][0].slice(4, 6)}`), // Generate labels dynamically
      datasets: [
        {
          label: type,
          data: data,
          backgroundColor: 'rgba(164, 30, 20, 0.8)',
          borderColor: 'rgba(241, 48, 35, 1)',
          borderWidth: 1,
        },
      ],
    },
    options: {
      responsive: false,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: true,
          position: 'top',
        },
      },
      scales: {
        x: {
          title: {
            display: true,
          },
        },
        y: {
          title: {
            display: true,
          },
        },
      },
      layout: {
        padding: {
          left: 0,
          right: 0,
          top: 20,
          bottom: 20,
        },
      },
    },
  });

  // Reset color of all buttons
  const buttons = document.getElementsByTagName('button');
  for (let i = 0; i < buttons.length; i++) {
    buttons[i].classList.remove('selectedButton');
  }

  // Apply selected color to the clicked button
  const selectedButton = document.getElementById(buttonId);
  selectedButton.classList.add('selectedButton');
}

getCompanyHistoryData();
</script>
</html>